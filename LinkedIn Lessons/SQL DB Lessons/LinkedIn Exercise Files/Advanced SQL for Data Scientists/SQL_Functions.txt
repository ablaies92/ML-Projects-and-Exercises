Extending SQL:
- SQL provides many types of functions for operating on data
- Data Science and analytics need more functions
	Types of SQL Functions:
	- aggregate
	- string manipulation
	- pattern matching
	- date and time
	- geometric
- Not all built-in SQL functions can accomplish what we need sometimes; this is where custom functions come into play (e.g. customer loyalty level, past due priority score, predicted lifetime value of a customer, predicted probability of defualting on payments)
- Five types of user-defined functions for PostgresSQL
	- query language functions written in SQL
	- procedural functions written in PL/pgSQL (combo of SQL + pascal)
	- Internal functions written in C and statistically linked to PostgresSQL
	- C language functions available through shared libraries
	- PL/Python by extension - not a trusted language (use with caution)
- SQL query functions:
	- execute arbitrary list of SQL statements
	- return result of last statement
		- last statement must be a SELECT
		- Or the function must be declared VOID
		- may be declared to return a set
	- how do you create a function? 
		- use CREATE FUNCTION or CREATE OR REPLACE FUNCTION
		- updates the definition of a function if it already exists
	- DROP FUNCTION deletes an existing function; then, you create a new function with a unique identifier
		- need to drop existing rules, views, triggers, and so on, that refer to the dropped function
	- What about the harmonic mean?
		- a kind of average
		- reciprocal of arithmetic mean
		- often used with rates
		- also used in information retrieval and machine learning (F/F1-score)
		
-- create or replace supplants existing function 
CREATE OR REPLACE FUNCTION harmonic_mean(x numeric, y numeric) RETURNS numeric
-- working with strings requires the $$; defining the language to use
AS $$
	SELECT round(((2 * x * y)/(x + y))::numeric, 2)
$$ LANGUAGE SQL

-- using the above function in practice
SELECT harmonic_mean(2,7)
-- returns 3.11

- What about function overloading? PostgresSQL accomodates the need to use a single function with multiple definitions
- For example, consider the same function that requires different input data types
	- CREATE FUNCTION harmonic_mean (x numeric, y numeric)
	  RETURNS numeric
	- CREATE FUNCTION harmonic_mean (x text, y text)
	  RETURNS numeric
	- this may be declared to return a set
	- useful when the same function can apply to different data types; avoids ambiguities

-- create or replace supplants existing function 
CREATE OR REPLACE FUNCTION harmonic_mean(x numeric, y numeric) RETURNS numeric
-- working with strings requires the $$; defining the language to use
AS $$
	SELECT round(((2 * x * y)/(x + y))::numeric, 2)
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION harmonic_mean(x text, y text) RETURNS numeric
AS $$
	SELECT round(((2 * x::numeric * y::numeric)/(x::numeric + y::numeric))::numeric, 2)
$$ LANGUAGE SQL;


-- using the above function in practice
SELECT harmonic_mean(2.2,7.1), harmonic_mean('2.2','7.1')
-- returns 3.36 and 3.36 as expected


	